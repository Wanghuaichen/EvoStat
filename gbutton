#!/usr/bin/xpce
:- use_module(library(time)).
:- use_module(library(pce)).
:- use_module(library(process)).
:- use_module(library(charsio)).
:- use_module(library(helpidx)).
:- use_module(library(lists)).
:- use_module(library(ctypes)).

% Arduino controllers return type as a single character id(char),
id_type(0's, supply).
id_type(0'l, lagoon).
id_type(0'c, cellstat).
id_type(0'a, sampler).

mix_colors(   _, red,    red) :- !.
mix_colors( red,   _,    red) :- !.
mix_colors(   C,   C,      C) :- !.
mix_colors(   _,blue, purple) :- !.
mix_colors(blue,   _, purple) :- !.
mix_colors(   _,  _,  orange).

compatible(T1,T2) :-
	nonvar(T1),nonvar(T2),
        functor(T1,Name,Arity),functor(T2,Name,Arity).
compatible(T1,T2) :-
	nonvar(T2),functor(T2,Name,Arity),
	writeln(parse_error(expected(Name/Arity),got(T1))),
	fail.

report_error(Reply) :-
	( catch(atom_to_term(Reply,converse_Error(X),_),_,fail)
	-> plog(error(X))
	;  true
	).
%
% Dec10 option is cool, it will plow through nonsense until it 
% reads a valid term, or hits end_of_file which is a Term!
% ( end_of_file means end_of_atom in this case )
%
parse_reply(@nil, _) :- !.
parse_reply(Reply, Term) :-
	read_term_from_atom(Reply,Term,[syntax_error(dec10)]).

parse_reply_arg1(@nil, _, _) :- !.
parse_reply_arg1(Reply, Functor, Arg1) :-
	read_term_from_atom(Reply,Term,[syntax_error(dec10)]),
	Term =.. [Functor,Arg1|_].

getIPfromMAC(_,_) :- fail.

snapshot(Path, FileName) :-
	concat_atom([Path,'web/phagestat.jpg'],FileName).

:- dynamic tog/1.
toggle('mypic1.jpg','mypic2.jpg') :- tog(2), retract(tog(2)),assert(tog(1)).
toggle('mypic2.jpg', 'mypic1.jpg') :- tog(1), retract(tog(1)),assert(tog(2)).

wget( OtherFile,
      '/usr/bin/wget',
      ['-q', '-O',File,
      'http://192.168.2.117:88/cgi-bin/CGIProxy.fcgi?cmd=snapPicture2&usr=scrapsec&pwd=lakewould']):-
      toggle(File,OtherFile).


:- pce_begin_class(snapshot, window).

initialise(Self, Label:[name]) :->
	  "Initialise the image area"::
        send_super(Self, initialise(Label)),
        send_super(Self, alignment, center),
	send(Self, size, size(580,440)),
	new(I, image('./web/phagestat.jpg')),
	send(Self, display, new(_, bitmap(I))).

update(Self) :->
      writeln(updating(snapshot)),
      R is random(100),
      concat_atom(['./web/phagestat',R,'.jpg'],NewFile),
      copy_file('./web/phagestat.jpg',NewFile),
      send(Self, display, new(_, bitmap(NewFile))),
      delete_file(NewFile),
      write(user_error, updated(snapshot)), nl(user_error).

:- pce_end_class.

:- pce_begin_class(ebutton, button).

variable(myname,           name,       both, "Component ID"             ).
variable(socket,            any,       both, "Bluetooth/IP Socket"      ).
variable(reply,            name,       both, "Last Message from Device" ).
variable(l,                 int := 29, both, "Percent Full"             ).
variable(tl,                int := 31, both, "Target Level"             ).
variable(fr,               real := 1.5, both,"Flow  Rate"               ).
variable(tf,               real := 3.5, both, "Target Flow Rate"        ).
variable(minfi,            int := 400,  both, "Min Input valve ms"      ).
variable(maxfi,            int := 1400, both, "Max Input valve ms"      ).
variable(minfo,            int := 400,  both, "Min Output valve ms"     ).
variable(maxfo,            int := 1400, both, "Max Output valve ms"     ).
variable(levelUnits,       name := '%', both, "% or mL (usually)"       ).
variable(turbidityUnits,   name := 'OD(600)', both,"Optical Density"      ).
variable(temperatureUnits, name := 'C', both, "Degrees Centigrade"      ).
variable(flowUnits,        name := 'Vol/hr', both, "Vol/hr"             ).
variable(fluxUnits,        name := 'lux',    both, "lux"                ).
variable(rlUnits,          name := 'RLU',    both, "rlu"                ).

initialise(Self, Label:[name]) :->
	"Initialise the button and connect to device"::
        send_super(Self, initialise(Label)),
        send(Self, myname, Label),
	retractall(changed(Self,_,_)),
	send(Self, slot, l,  30),
	send(Self, slot, tl, 71),
	send(Self, slot, socket, @nil),
	new(Code,  message(Self, show_conversation)),

	send(Self, recogniser, click_gesture(right,'',single,Code)).

update(_Self) :-> true. % Anything that all buttons do
	
show_conversation(@Name) :->
        get(@Name, socket, Socket),
	(Socket == @nil
	    -> send(@Name, connect)
	    ; new(_, dialin(Name,Socket))
	).
	
compute(_) :-> true.

% Shape is defined as a percentage of the screen
shape(Self, W:[int], H:[int]) :->
	window_percent(W,H,MyWidth,MyHeight),
%	writeln(shape(Self,MyWidth,MyHeight)),
	send(Self, size, size(MyWidth,MyHeight)).

od(Self, OD600:[real]) :->
	 Turb is integer(OD600*1000),
	 send(Self, tb, Turb).

temp(Self, Temp:[int]) :->
	 send(Self, tt, Temp),
         plog(tempsetting(Self,Temp)).

% Cellstat, Lagoon, and Autosampler Bluetooth Communications
%
% Wedged Arduinos give null responses, but just what constitutes
% a null response when there are SIX kinds of nuthin!
%
nullreply("") :- !,writeln(reply(doublequotes)).
nullreply([]) :- !,writeln(reply(emptylist)).
nullreply(['']) :- !,writeln(reply(emptyatominalist)).
nullreply('') :- !,writeln(reply(emptyatom)).
nullreply(``) :- !,writeln(reply(emptystring)).
nullreply(AS) :- atom_string('',AS),!,writeq(reply(atomstring)).
%nullreply(NR) :- writeq(reply(good,NR)),fail.

replyok(R) :- \+ nullreply(R).

% Util maybe
good_socket(Self, Socket) :-
	get(Self, socket, S),
        check_socket(Self, S, Socket).

check_socket(_,S,S) :- integer(S), S>=0.
check_socket(_,S,S) :- integer(S), S>=0,
		        bt_areset(S),  % reset
			sleep(4). % needs time
check_socket(Self, S, NewSocket) :-  % Get new/first socket
	( integer(S), S>=0 -> close(S) ; true ),
	component(Name, _, Self),
	bt_device(Name, Addr),
	bt_socket(Addr, NewSocket),
 	NewSocket >= 0,
	send(Self, slot, socket, NewSocket),
	send(Self,colour,colour(darkgreen)).

check_socket(Self, _, _) :-> 
	send(Self,colour,colour(red)),
	fail.
	
converse(Self,_) :->
        component(Name, _, Self),
        not(bt_device(Name, _Addr)),
        !. % Do nothing because no connection
	
converse(Self, Cmd) :-> "Bluetooth Serial Communication"::
	good_socket(Self, Socket),     % nondet
	bluetalk(Socket, Cmd, Reply),
	replyok(Reply),
	send(Self,reply,Reply).

connect(Self) :->
	send(Self, converse, id),
	get(Self, reply, Reply),
	parse_reply(Reply,Term),
	nonvar(Term),
	Term =.. [_,ID],
	id_type(ID,Type),
	plog(connected(Type)).

connect(Self) :->
	get(Self, myname, MyName),
	plog(failed(bt_socket(MyName))),
	send(Self,colour,colour(red)).

%
% These utilities inside class simplify the code
% generated from the interface
%
% updateArduino(Obj)     synchronize GUI <-> Arduino
% sendArduino(Obj,Cmd)   move values GUI -> Arduino
% getArduino(Obj,Cmd)    move values Arduino -> GUI
% updateLabel(T,N,-Label) Label showing curent values

sendArduino(Obj,Cmd) :-
	get(Obj,Cmd,Value),
	concat_atom([Cmd,Value],CmdVal),
	send(Obj, converse, CmdVal).
sendArduino(_Obj,Cmd) :-
        plog(sendArduino(Cmd,failed)).

getArduino(Obj,Cmd) :-
        send(Obj,converse,Cmd),
	get(Obj,reply, Reply),
	parse_reply_arg1(Reply, N2, V2),
	nonvar(N2),
	nonvar(V2),
	send(Obj, N2, V2).
getArduino(_Obj,Cmd) :-
    plog(getArduino(Cmd,failed)).

% Get r/o and push r/w values to Device
updateArduino(Obj, ReadOnly) :-
    findall(P,retract(changed(Obj,P,_)),Ps),
    maplist( send(Obj,pull), ReadOnly),
    maplist( send(Obj,push), Ps),
    ( Ps = [] -> true; send(Obj,converse, s) ),
    send(Obj, check_level).

updateLabel(Obj, NewLabel) :-
    component(Name,Type,Obj),
    retractall(html_syntax), % labels with nl, not HTML
    label(Type, Name, Label,[]),
    flatten(Label, List),
    concat_atom(List, NewLabel).

:- pce_end_class. % ebutton

paint(Things, Color) :-
	send(@gui?graphicals, for_all,
		if(message(@arg1,instance_of,Things),
				message(@arg1,color(Color)))).

leak_type(<, definite).
leak_type(>, no).
leak_type(=, possible).

leak_color(definite, red).
leak_color(      no, blue).
leak_color(possible, orange).

check_leak :-
	component(_,cellstat,Obj),
	get(Obj, a0, N),
	compare_delta(Op,N,500,200),
        leak_type(Op,Type),
	retractall(leak(_)),
	assert(leak(Type)),
        leak_color(Op,Color),
	paint(spacer,Color).

reportDeltaT(Who, Old, New) :-
	DeltaT is integer(abs(Old-New)/10), % DeltaT in degrees
	retractall(err(Who,deltaT(_))),
	(DeltaT > 5 -> assert(err(Who,deltaT(DeltaT))) ; true).

reportTurb(Who,What,Target,Turb) :- 
	condition(Turb, Target, 50, Cond),
	retractall(turbidity(Who,What,   _,   _)),
	assert(    turbidity(Who,What,Cond,Turb)).

condition(Value,Target,Delta,Cond) :-
	LowThresh is Target - Delta,
	HighThresh is Target + Delta,
	( Value < LowThresh   -> Cond = low
	 ;(Value > HighThresh -> Cond = high
	 ;                       Cond = okay)).

:- pce_begin_class(spacer, box). % SECTION SEPARATOR
variable(defaultColor, name := black, both, "Default Color" ).
initialise(Self, _Name:[name]) :->
        screen(DW,_,WW,_,_),
	NWid is DW*WW/110,
        send_super(Self, initialise(NWid, 6)),
        get(Self, defaultColor, C),
	send(Self, colour, colour(C)),
	send(Self, fill_pattern, colour(C)).

color(Self, Color) :->
     ( get(Self,defaultColor,black)         % First time
      -> send(Self,slot,defaultColor,Color) % New default
      ;  true
     ),
     send(Self, colour, colour(Color)),
     send(Self, fill_pattern, colour(Color)).

resetColor(Self) :-> 
     get(Self, defaultColor,C),
     send(Self, colour, colour(C)).

update(_Self) :-> true.
:- pce_end_class.

:- pce_begin_class(hotbox, box).
initialise(Self, Color:[name]) :->
        "Initialise"::
        window_percent(1,2,Width,Height),
        send_super(Self, initialise(Width,Height)),
	send(Self, colour, colour(black)),
        send(Self, fill_pattern, colour(Color)).
:- pce_end_class.

% Arduino interface objects [cellstat,lagoon, etc.]
:- tell(iface), [ard], told.   % Create Interface classes
:- [iface].                    % CONSULT
:- [dialin].   % Pop up Arduino dialog
:- [prephtml]. % prepare PCE data for web

