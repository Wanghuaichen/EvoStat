#!/usr/bin/xpce
:- use_module(library(time)).
:- use_module(library(pce)).
:- use_module(library(process)).
:- use_module(library(charsio)).
:- use_module(library(helpidx)).
:- use_module(library(lists)).
:- use_module(library(ctypes)).

:- use_module(library(time)).
:- use_module(library(process)).

:- dynamic tog/1.
:- dynamic ard/5.
:- dynamic errs/2.
:- multifile errs/2.

timeatom(Hours,M,S,TimeAtom) :-
	format(atom(Minutes), '~|~`0t~w~2|', M),
	format(atom(Seconds), '~|~`0t~w~2|', S),
	concat_atom([Hours,':',Minutes,':',Seconds],TimeAtom).
	
window_percent(WFraction,HFraction,W,H) :-
	screen(DW,DH, WW, WH, _Loc),
	W is integer(DW*WW*WFraction/10000),
	H is integer(DH*WH*HFraction/11000).

mix_colors(   _, red,    red) :- !.
mix_colors( red,   _,    red) :- !.
mix_colors(   C,   C,      C) :- !.
mix_colors(   _,blue, purple) :- !.
mix_colors(blue,   _, purple) :- !.
mix_colors(   _,  _,  orange).

compatible(T1,T2) :-
	nonvar(T1),nonvar(T2),
        functor(T1,Name,Arity),functor(T2,Name,Arity).
compatible(T1,T2) :-
	nonvar(T2),functor(T2,Name,Arity),
	writeln(parse_error(expected(Name/Arity),got(T1))),
	fail.

% The Autosampler controls drain valves for the other components

% Return the component's drain valve
component_drain(Obj, Valve) :-
    component(Lagoon,lagoon,Obj),
    !,
    atom_codes(Lagoon, Codes),
    append(_,[Digit],Codes),
    atom_codes(Valve, [0'i,Digit]).

component_drain(_, i0).

adjust(Obj, Amt) :-
      Inflow is   Amt/2,
      Outflow is -Amt/2,
      adjust_valve(Obj,i1,Inflow),
      component_drain(Obj,Drain),
      component(_,sampler,S),
      adjust_valve(S,Drain,Outflow).

adjust_valve(Obj, Valve, Amt) :-
      get(Obj, Valve, Setting),
      New is Setting + Amt,
      send(Obj, Valve, New),
      assert(changed(Obj,Valve)).

parse_reply(Reply, Term, Default) :-
	catch( atom_to_term(Reply,TmpTerm,_TMBindings),
	       Exception,
	       ( writeln(caught(Exception,atom_to_term(Reply))),
                 TmpTerm = exception(Exception))
             ),
	( compatible(TmpTerm,Default) -> Term = TmpTerm
	;                                Term = Default
	).

getIPfromMAC(_,_) :- fail.

snapshot(Path, FileName) :-
	directory_files(Path,FileList),
	member(IFile,FileList),
	atom_codes(IFile,ICs),
	append("mypic",_,ICs),
	concat_atom([Path,IFile],FileName),
	!.
snapshot(Path, Filename) :-
	concat_atom([Path,'opencvlevel.jpg'], Filename).


% WGET will use alternate filenames so we update Image proerly
% and are never caught reading a file that hasn't been fully written

toggle('mypic1.jpg','mypic2.jpg') :- tog(2), retract(tog(2)),assert(tog(1)).
toggle('mypic2.jpg', 'mypic1.jpg') :- tog(1), retract(tog(1)),assert(tog(2)).

wget( OtherFile,
      '/usr/bin/wget',
      ['-q', '-O',File,
      'http://192.168.2.117:88/cgi-bin/CGIProxy.fcgi?cmd=snapPicture2&usr=scrapsec&pwd=lakewould']):-
      toggle(File,OtherFile).

repeat(N) :-
             integer(N), % type check
             N>0,        % value check 
%	     write(user_error,repeat(N)), nl(user_error),
             repeatN(N).

repeatN(1) :- !,plog(repeatN_exhausted),fail.
repeatN(_).
repeatN(N) :- M is N-1, repeatN(M).

waitfor(N,Atom,_) :-
   repeat(N),
   ( call(Atom) -> true ; sleep(0.2), fail ),
   !.

waitfor(N,Atom,Who) :-  
    plog(failed(waitfor(N,Atom,Who))),
    fail.
    
semaphore(N,Atom,_) :- % wait for and grab it
   repeat(N),
   ( retract(Atom) -> true ; sleep(0.2), fail ),
   !.

semaphore(N,Atom,Who) :- % Report failure and assert a new one (dangerous?)
    plog(failed(semaphore(Who,N,Atom))),
    retractall(webok),  % In case we failed for another reason.
    assert(webok),
    plog(asserting(webok)),
    fail.

%:- load_bluetooth, writeln('BLUETOOTH loaded while consulting gbutton').

:- pce_begin_class(snapshot, window).

initialise(Self, Label:[name]) :->
	  "Initialise the image area"::
        send_super(Self, initialise(Label)),
        send_super(Self, alignment, center),
	send(Self, size, size(580,440)),
	new(I, image('./web/phagestat.jpg')),
	send(Self, display, new(_, bitmap(I))).

update(Self) :->
      writeln(updating(snapshot)),
      R is random(100),
      concat_atom(['./web/phagestat',R,'.jpg'],NewFile),
      copy_file('./web/phagestat.jpg',NewFile),
      send(Self, display, new(_, bitmap(NewFile))),
      delete_file(NewFile),
      write(user_error, updated(snapshot)), nl(user_error).

:- pce_end_class.

:- pce_begin_class(ebutton, button).

variable(myname,           name,       both, "Component ID"             ).
variable(socket,            any,       both, "Bluetooth/IP Socket"      ).
variable(reply,            name,       both, "Last Message from Device" ).
variable(l,                 int := 29, both, "Percent Full"             ).
variable(tl,                int := 31, both, "Target Level"             ).
variable(f,                real := 1.5, both,"Flow  Rate"               ).
variable(tf,               real := 3.5, both, "Target Flow Rate"        ).
variable(levelUnits,       name := '%', both, "% or mL (usually)"       ).
variable(turbidityUnits,   name := 'OD600', both,"Optical Density"      ).
variable(temperatureUnits, name := 'C', both, "Degrees Centigrade"      ).
variable(flowUnits,        name := 'Vol/hr', both, "Vol/hr"             ).
variable(fluxUnits,        name := 'rlu',    both, "rlu"                ).

initialise(Self, Label:[name]) :->
	"Initialise the button and connect to device"::
        send_super(Self, initialise(Label)),
        send(Self, myname, Label),
	send(Self, slot, l,  30),
	send(Self, slot, tl, 87),
	send(Self, slot, levelUnits,   'mL'),
	send(Self, slot, temperatureUnits,   'C'),
	send(Self, slot, turbidityUnits,   'OD(600)'),
	send(Self, slot, fluxUnits,        'rlu'),
	send(Self, slot, socket, @nil),
	send(Self, connect),
	new(Code,  message(Self, show_conversation)),
	send(Self, recogniser, click_gesture(right,'',single,Code)).

update(_Self) :-> true. % Anything that all buttons do
	
show_conversation(Self) :->
        Self = @Name,
        get(Self, socket, Socket),
	new(_, dialin(Name,Socket)).
	
compute(_) :-> true.

% Shape is defined as a percentage of the screen
shape(Self, W:[int], H:[int]) :->
	window_percent(W,H,MyWidth,MyHeight),
%	writeln(shape(Self,MyWidth,MyHeight)),
	send(Self, size, size(MyWidth,MyHeight)).

od(Self, OD600:[real]) :->
	 Turb is integer(OD600*1000),
	 send(Self, tb, Turb).

temp(Self, Temp:[int]) :->
	 send(Self, tt, Temp),
         plog(tempsetting(Self,Temp)).

% Cellstat, Lagoon, and Autosampler Bluetooth Communications
%
% Wedged Arduinos give null responses, but just what constitutes
% a null response when there are SIX kinds of nutthin!
%
nullreply("") :- !,writeln(reply(doublequotes)).
nullreply([]) :- !,writeln(reply(emptylist)).
nullreply(['']) :- !,writeln(reply(emptyatominalist)).
nullreply('') :- !,writeln(reply(emptyatom)).
nullreply(``) :- !,writeln(reply(emptystring)).
nullreply(AS) :- atom_string('',AS),!,writeq(reply(atomstring)).
%nullreply(NR) :- writeq(reply(good,NR)),fail.

converse(Self, Cmd) :->
	"Send command to Bluetooth Socket and save Reply ( Cellstat/Lagoon )"::
        get(Self, socket, Socket),
	bluetalk(Socket, Cmd, Reply),
	( nullreply(Reply)
	 ->  get(Self, label, MyName),
	     bt_areset(Socket),
	     count(reset, MyName),
	     sleep(4),
	     bluetalk(Socket, Cmd, Reply2),
	     ( nullreply(Reply2)
	      -> assert(err(MyName, new_socket)),
		 send(Self, connect),
		 bluetalk(Socket, Cmd, Reply3),
		 ( nullreply(Reply3)
		  -> assert(err(MyName,and(reset,new_socket))),
		     send(Self, slot, reply, 'failure.')
		  ; send(Self, slot, reply, Reply3)
		 )
	      ; send(Self, slot, reply, Reply2)
	     )
	 ; send(Self, slot, reply, Reply)
	).

connect(Self) :->
	"Connect (or re-connect) the Bluetooth channel"::
	get(Self, myname, MyName),
	( bt_device(MyName, Addr) -> true ; Addr = "DD:DD:DD:DD:DD:DD" ),
	get(Self, socket, OldSocket),
        ( OldSocket == @nil -> true
	; bt_close(OldSocket),
	  writeln(setting(MyName,socket,@nil)),
	  send(Self, slot, socket, @nil)
	),
	( bt_socket(Addr, BTSocket) ->
	  write(socket(BTSocket)),write(' '),
	  ( BTSocket > -1 ->
	    send(Self, slot, socket, BTSocket),
	    send(Self,colour,colour(darkgreen))
	    ;
	    writeln(returned(MyName,bt_socket,BTSocket)),
	    send(Self,colour,colour(red))
	  )
	  ; writeln(failed(bt_socket(MyName))),
	    send(Self,colour,colour(red))
	).

insertIP(Cmd, IP, Result) :-
        atom_codes(Cmd, Cs),
        atom_codes(IP, ICs),
	[AT] = "@",
        append(Front,[AT|Rest],Cs),
	flatten([Front,ICs,Rest],CommandCs),
	atom_codes(Result,CommandCs).

ip(Self, IP:[name]) :->
	 socket(IP, Socket),
	 send(Self, slot, ipsocket, Socket).

mac_wget(Self, MAC:[name], Cmd:[name]) :->
        getIPfromMAC(MAC,IP),
	send(Self, wget, wget(IP, Cmd)).

wget(Self, IP:[name], Cmd:[name]) :->
        insertIP(Cmd,IP,Command),
	send(Self, slot, wget, Command).

:- pce_end_class. % ebutton

paint(Things, Color) :-
	send(@gui?graphicals, for_all,
		if(message(@arg1,instance_of,Things),
				message(@arg1,color(Color)))).

leak_type(<, definite).
leak_type(>, no).
leak_type(=, possible).

leak_color(definite, red).
leak_color(      no, blue).
leak_color(possible, orange).

compare_delta(>,A,B,Delta) :- Upper is B+Delta, A > Upper, !.
compare_delta(<,A,B,Delta) :- Lower is B-Delta, A < Lower, !.
compare_delta(=,_,_,_).

check_leak :-
	component(_,cellstat,Obj),
	get(Obj, a0, N),
	compare_delta(Op,N,500,200),
        leak_type(Op,Type),
	retractall(leak(_)),
	assert(leak(Type)),
        leak_color(Op,Color),
	paint(spacer,Color).

reportDeltaT(Who, Old, New) :-
	DeltaT is integer(abs(Old-New)/10), % DeltaT in degrees
	retractall(err(Who,deltaT(_))),
	(DeltaT > 5 -> assert(err(Who,deltaT(DeltaT))) ; true).

reportTemp(Who, What,Target,Temp) :-  % Temp in 1/10 degC
	condition(Temp, Target, 20, Cond),
	retractall(temperature(Who,_,_,_)),
	assert(temperature(Who,What,Cond,Temp)).

reportTurb(Who,What,Target,Turb) :- 
	condition(Turb, Target, 50, Cond),
	retractall(turbidity(Who,What,   _,   _)),
	assert(    turbidity(Who,What,Cond,Turb)).

condition(Value,Target,Delta,Cond) :-
	LowThresh is Target - Delta,
	HighThresh is Target + Delta,
	( Value < LowThresh   -> Cond = low
	 ;(Value > HighThresh -> Cond = high
	 ;                       Cond = okay)).

:- pce_begin_class(spacer, box). % SECTION SEPARATOR
variable(defaultColor, name := black, both, "Default Color" ).
initialise(Self, _Name:[name]) :->
        screen(DW,_,WW,_,_),
	NWid is DW*WW/110,
        send_super(Self, initialise(NWid, 6)),
        get(Self, defaultColor, C),
	send(Self, colour, colour(C)),
	send(Self, fill_pattern, colour(C)).

color(Self, Color) :->
     ( get(Self,defaultColor,black)         % First time
      -> send(Self,slot,defaultColor,Color) % New default
      ;  true
     ),
     send(Self, colour, colour(Color)),
     send(Self, fill_pattern, colour(Color)).

resetColor(Self) :-> 
     get(Self, defaultColor,C),
     send(Self, colour, colour(C)).

update(_Self) :-> true.
:- pce_end_class.

:- pce_begin_class(hotbox, box).
initialise(Self, Color:[name]) :->
        "Initialise"::
        window_percent(1,2,Width,Height),
        send_super(Self, initialise(Width,Height)),
	send(Self, colour, colour(black)),
        send(Self, fill_pattern, colour(Color)).
:- pce_end_class.

% Arduino interface objects [ supplies, cellstat, lagoons, sampler ]

:- tell(iface), [ard], told.   % GENERATE
:- [iface].                    % CONSULT

:- [dialin].  % Pop up Aduino dialog interface

:- [prephtml]. % prep/0 will prepare/assert PCE data for web server

