#!/usr/bin/xpce
:- use_module(library(time)).
:- use_module(library(pce)).
:- use_module(library(process)).
:- use_module(library(charsio)).
:- use_module(library(helpidx)).
:- use_module(library(lists)).
:- use_module(library(ctypes)).


:- use_module(library(time)).
:- use_module(library(process)).

:- dynamic tog/1.
:- dynamic ard/5.

% This fact implies:
% 
% Send 'b' to a cellstat to get turbidity(T)
% Store T in turbidity term
% and

interrogation(cellstat,[t:temperature,b:turbidity]).
interrogation(lagoon, [t:temperature]).

interrogate(Type) :-
    component(_, Type, Object),
    interrogation(Type, Questions),
    member(Cmd:Functor, Questions),
    send(Object,converse,Cmd),
    get(Object,slot,reply,Reply),
    catch( atom_to_term(Reply,Term,_Bind),
	   Exception,
	   writeln(expected(Functor/1,Reply,Exception))),
    Term =.. [Functor,Answer],
    send(Object,slot, Functor, Answer),
    fail.
interrogate(_).

timeatom(Hours,M,S,TimeAtom) :-
 	(M > 9 -> M = Minutes ; concat_atom(['0',M],Minutes)),
 	(S > 9 -> S = Seconds ; concat_atom(['0',S],Seconds)),
	concat_atom([Hours,':',Minutes,':',Seconds],TimeAtom).
	
window_percent(WFraction,HFraction,W,H) :-
	screen(DW,DH, WW, WH, _Loc),
	W is integer(DW*WW*WFraction/10000),
	H is integer(DH*WH*HFraction/11000).

compatible(T1,T2) :-
	nonvar(T1),nonvar(T2),
        functor(T1,Name,Arity),functor(T2,Name,Arity).
compatible(T1,T2) :-
	nonvar(T2),functor(T2,Name,Arity),
	writeln(parse_error(expected(Name/Arity),got(T1))),
	fail.

parse_reply(Reply, Term, Default) :-
	catch( atom_to_term(Reply,TmpTerm,_TMBindings),
	       Exception,
	       ( writeln(caught(Exception,atom_to_term(Reply))), TmpTerm = exception(Exception))),
	( compatible(TmpTerm,Default)
	 -> Term = TmpTerm
	;   Term = Default
	).

getIPfromMAC(_,_) :- fail.

snapshot(Path, FileName) :-
	directory_files(Path,FileList),
	member(IFile,FileList),
	atom_codes(IFile,ICs),
	append("mypic",_,ICs),
	concat_atom([Path,IFile],FileName),
	!.
snapshot(Path, Filename) :-
	concat_atom([Path,'opencvlevel.jpg'], Filename).


% WGET will use alternate filenames so we update Image properly
% and are never caught reading a file that hasn't been fully written

toggle('mypic1.jpg','mypic2.jpg') :- tog(2), retract(tog(2)),assert(tog(1)).
toggle('mypic2.jpg', 'mypic1.jpg') :- tog(1), retract(tog(1)),assert(tog(2)).

wget( OtherFile,
      '/usr/bin/wget',
      ['-q', '-O',File,
      'http://192.168.2.117:88/cgi-bin/CGIProxy.fcgi?cmd=snapPicture2&usr=scrapsec&pwd=lakewould']):-
      toggle(File,OtherFile).

repeat(N) :-
             integer(N), % type check
             N>0,        % value check 
             repeat1(N).

repeat1(1) :- !.
repeat1(_).
repeat1(N) :- M is N-1, repeat1(M).

:- ( current_prolog_flag(arch,'i386-win32')
     -> load_foreign_library(foreign(plblue))
     ;  load_foreign_library(plblue)
   ),
   writeln('plblue (BLUETOOTH) loaded').

:- pce_begin_class(snapshot, label).

variable(imageDirectory, name, get, "Current Image Path" ).
variable(imageFile,      name, get, "Current Image Filename" ).

initialise(Self, Label:[name]) :->
	"Initialise the image area"::
        send_super(Self, initialise(Label)),
	snapshot('./',File),
	send(Self, slot, imageFile, File),
	send(Self, slot, imageDirectory, './'),
	new(I, image(File)),
	new(B, bitmap(I)),
	send(B, size, size(200,100)),
	send(Self, selection, B),
	assert(tog(1)).

shape(Self, W:[int], H:[int]) :->
	window_percent(W,H,MyWidth,MyHeight),
%	writeln(size(Self,MyWidth,MyHeight)),
	send(Self, size, size(MyWidth,MyHeight)).

image(Self, File:[name])      :->
	send(Self,slot,imageFile, File).

imageDirectory(Self, Path:[name]) :-> send(Self,slot,imageDirectory, Path).

update(Self) :->
	writeln(updating(snapshot)),
	get(Self, imageDirectory, Path),
	get(Self, imageFile, OldFile),
	snapshot(Path, NewFile),
	( NewFile = OldFile -> true
	; new(I, image(NewFile)),
	  send(Self, slot, imageFile, NewFile),
	  send(Self,selection, I)
	),
	writeln(updated(snapshot)).

:- pce_end_class.


:- pce_begin_class(ebutton, button).

variable(socket,      any, get, "Bluetooth/IP Socket"      ).
variable(mac,        name, get, "Bluetooth/IP MAC Address" ).
variable(reply,      name, get, "Last Message from Device" ).
variable(levelUnits, name, get, "% or mL (usually)"        ).

% Current Settings
variable(turbidity,       int, get, "Optical Density (600nM)").
variable(temperature, real, get, "Temperature").

% Target Settings
variable(tturbidity,       int, get, "Target Optical Density (600nM)").
variable(ttemperature, real, get, "Target Temperature").

initialise(Self, Label:[name]) :->
	"Initialise the button and connect to device"::
        send_super(Self, initialise(Label)),
	send(Self, slot, levelUnits, 'mL'),
	send(Self, slot, ttemperature, 37.0),
	send(Self, slot, tturbidity, 400),
	send(Self, slot, temperature, 0.0),
	send(Self, slot, turbidity, 0.0),
	send(Self, slot, socket, @nil),
	( bt_device(Label,Mac),
	  send(Self, slot, mac, Mac),
	  send(Self, connect)
	; true
	),
	new(Code2, message(Self, show_conversation)),
	send(Self, recogniser, click_gesture(right,'',single,Code2)).

% Indicate a live Bluetooth connection with green
update(Self) :->
	( get(Self, slot, socket, @nil)
	-> send(Self,colour,colour(red))
	;  send(Self,colour,colour(darkgreen))
	).
	
show_conversation(Self) :->
        Self = @Name,
        get(Self, socket, Socket),
	new(_, dialin(Name,Socket)).
	
levelUnits(Self,Units) :->
       send(Self, slot, levelUnits, Units).

mix_colors(   C,   C,      C) :- !.
mix_colors(   _,blue, purple) :- !.
mix_colors(blue,   _, purple) :- !.
mix_colors(green,  _, orange) :- !.
mix_colors( _, green, orange) :- !.
mix_colors( _, red,   red).

compute(_) :-> true.

% Shape is defined as a percentage of the screen
shape(Self, W:[int], H:[int]) :->
	window_percent(W,H,MyWidth,MyHeight),
%	writeln(shape(Self,MyWidth,MyHeight)),
	send(Self, size, size(MyWidth,MyHeight)).

od(Self, OD600:[real]) :->
	 send(Self, slot, turbidity, OD600).

temp(Self, Temp:[real]) :->
	 send(Self, slot, temperature, Temp).

% Cellstat, Lagoon, and Autosampler Bluetooth Communications

converse(Self, Cmd) :->
	"Send command to Bluetooth Socket and save Reply ( Cellstat/Lagoon )"::
        get(Self, socket, Socket),
	bluetalk(Socket, Cmd, Reply),
	(Reply == "" ->
	  send(Self, slot, reply, 'reconnecting.'),
	  send(Self, connect),
	  send(Self, converse, Cmd)
        ; send(Self, slot, reply, Reply)
	).

connect(Self) :->
	"Connect (or re-connect) the Bluetooth channel"::
	get(Self, mac, Addr),
	get(Self, socket, OldSocket),
        ( OldSocket == @nil -> true
	; bt_close(OldSocket),
	  send(Self, slot, socket, @nil)
	),
	( bt_socket(Addr, BTSocket) ->
	  write(socket(BTSocket)),write(' '),
	  ( BTSocket > -1 ->
	    send(Self, slot, socket, BTSocket),
	    send(Self,colour,colour(darkgreen))
	    ; send(Self,colour,colour(red))
	  )
	  ; write(failed(bt_socket)),
	    send(Self,colour,colour(red))
	).

insertIP(Cmd, IP, Result) :-
        atom_codes(Cmd, Cs),
        atom_codes(IP, ICs),
	[AT] = "@",
        append(Front,[AT|Rest],Cs),
	flatten([Front,ICs,Rest],CommandCs),
	atom_codes(Result,CommandCs).

ip(Self, IP:[name]) :->
	 socket(IP, Socket),
	 send(Self, slot, ipsocket, Socket).

mac_wget(Self, MAC:[name], Cmd:[name]) :->
        getIPfromMAC(MAC,IP),
	send(Self, wget, wget(IP, Cmd)).

wget(Self, IP:[name], Cmd:[name]) :->
        insertIP(Cmd,IP,Command),
	send(Self, slot, wget, Command).

mac(Self, MAC:[name]) :->
        getIPfromMAC(MAC,IP),
	send(Self, ip, ip(IP)).

:- pce_end_class. % ebutton

:- pce_begin_class(cellstat, ebutton).

variable(level, real, get, "Percent Full").
variable(leak,   int, get, "Leak Detector").

initialise(Self, Label:[name]) :->
	"Initialise the cellstat"::
        send_super(Self, initialise(Label)),
	send(Self, slot, level, 0).

check_leak(leak(N)) :- !, check_leak_value(N).
check_leak(P)       :-    writeln(expected(leak/1,P)).


check_leak_value(N) :-  N > 700,
			!,
			writeln('No leak'),
			retractall(leak(_)),
			send(@gui?graphicals, for_all,
			     if(message(@arg1,instance_of,spacer),
				message(@arg1,reset))).
			

check_leak_value(N) :- N < 300,
		       !,
		       writeln(leak(definitely)),
		       retractall(leak(_)),
		       assert(leak(definite)),
		       send(@gui?graphicals, for_all,
			    if(message(@arg1,instance_of,spacer),
			       message(@arg1,color,red))).

check_leak_value(N) :- writeln(leak(possible,N)),
		       retractall(leak(_)),
		       assert(leak(possible)),
		       send(@gui?graphicals, for_all,
			    if( message(@arg1,instance_of,spacer),
				message(@arg1,color,orange))).
	
update(Self) :->
	writeln(updating(cellstat)),
	send_super(Self, update),
	send_super(Self,converse,'t'),
        get(Self,slot,reply,Reply),
	(Reply='no_connection.' -> Label='Cellstat\nNo Bluetooth\nConnection'
	;
	parse_reply(Reply, temperature(Temp10), temperature(11.3)),
	Temp is Temp10/10.0,
        send(Self,slot, temperature, Temp),
        get(Self, slot, ttemperature, Target),
	LowThresh is Target - 2,
	HighThresh is Target + 2,
	retractall(temperature(cellstat,_,_)),
	( Temp < LowThresh -> assert(temperature(cellstat,low,Temp)) ; true ),
	( Temp > HighThresh -> assert(temperature(cellstat,high,Temp)) ; true ),
	writeln(update(cellstat,aftertemp)),
	range_color(Target, Temp, Tc),
        get(Self, slot, tturbidity, ODTarget),
	send_super(Self,converse,'w'),
        get(Self, slot, reply, LeakReply),
	parse_reply(LeakReply,Leak,leak(666)),
	check_leak(Leak),
	send_super(Self,converse,'b'),
        get(Self, slot, reply, TurbReply),
        atom_to_term(TurbReply,TbTerm,_TBBindings),
	TbTerm = turbidity(TurbVal),
	send(Self, slot, turbidity, TurbVal),
	range_color(ODTarget, TurbVal, ODc),
	mix_colors(Tc,ODc,Color),
	send(Self, colour(Color)),
	get(Self, slot, level, Level),
	format(atom(TempFmt), '~4g', [Temp]),
	format(atom(TargFmt), '~4g', [Target]),
        concat_atom(['\nCellStat  ',Level,'%\nTemperature: ', TargFmt, ' / ',TempFmt,'\n',
 		'Turbidity:  0.', ODTarget,' / 0.', TurbVal, '\n'], Label)
	),
	send(Self, label, Label),
        writeln(updated(cellstat,level(Level))).

setLevel(Self,Level) :->
       send(Self, slot, level, Level).

:- pce_end_class.  % cellstat

:- pce_begin_class(lagoon, ebutton).

variable(myname, name, get, "My real name").
variable(fluorescence,real, get, "Fluorescence").
variable(fluorescence_t, real, get, "Target Fluorescence").
variable(level,     real, get, "Level").
variable(level_t,   real, get, "Target Level").
variable(level_max, real, get, "Max Allowed Level").
variable(calibrate_level, real, get, "Calibration Level").

variable(calibration, name, get, "Calibration State Machine").
variable(target_rate, real, get, "Target Flow Rate").
variable(start_time, real, get, "Time since last Calibration state change").
variable(rate_input, real, get, "Calculated Input Flow Rate").
variable(rate_output, real, get, "Calculated Output Flow Rate").
variable(calibration, name, get, "Calibration State Machine").
variable(overflow,   int,   get, "Indication of Overflow").

initialise(Self, Label:[name]) :->
	"Initialise the lagoon"::
        send_super(Self, initialise(Label)),
	send(Self, slot, myname, Label),
	send(Self, slot, calibration, normal),
	send(Self, slot, level, 0.0),
	send(Self, slot, level_t, 36.0),
	send(Self, slot, fluorescence_t, 0.2),
	send(Self, slot, overflow, 0),
	send(Self, slot, fluorescence, 0.0).

update(Self) :->
        get(Self, slot, myname, MyName),
	writeln(updating(lagoon(MyName))),
        send_super(Self, update),
        send_super(Self,converse,'t'),
        get(Self,slot,reply,Reply),
	(Reply = 'no_connection.' -> Label = 'No Bluetooth\nConnection'
	;
	parse_reply(Reply,temperature(TempInt),temperature(111)),
	Temp is float(TempInt)/10.0,
        send(Self,slot,temperature,Temp),
        get(Self,slot,ttemperature,Target),
	LowThresh is Target - 2,
	HighThresh is Target + 2,
	retractall(temperature(MyName,_,_)),
	( Temp < LowThresh -> assert(temperature(MyName,low,Temp)) ; true ),
	( Temp > HighThresh -> assert(temperature(MyName,high,Temp)) ; true ),
	range_color(Target, Temp, Color),
	send(Self, colour(Color)),
        get(Self, slot, level, Level),
        get(Self, slot, fluorescence_t,LuxTarget),
        get(Self, slot, fluorescence,Lux),
	format(atom(Level2), '~4g', [Level]),
	format(atom(Lux2), '~4g', [Lux]),
	get(Self,slot,calibration,State),  % Calibration State is the Message
	send(Self,State),
        concat_atom(['Level ', Level2, '%\n',
	             'Temp  ', Target, 'C / ',Temp,' C\n',
                     'Lux   ', LuxTarget, ' / ', Lux2, 'lm' ], Label)
	),
	send(Self, label, Label),
	writeln(updated(lagoon(MyName))).

control_level(Self) :->                         % Level within range
	get(Self,slot,level,Level),
	get(Self,slot,level_t,TargetLevel),
	get(Self,slot,level_max,MaxLevel),
	Level < MaxLevel,
	Level > TargetLevel-1,
	!.

control_level(Self) :->                        % Overfilling !
	get(Self,slot,level,Level),
	get(Self,slot,level_max,MaxLevel),
	Level > MaxLevel,
	!,
	( get(Self,slot,overflow,1) -> true   % Already draining,
	;  send_super(Self,converse,'a0'),    %   or start now 
	   send(Self, slot, overflow, 1)
	).

control_level(Self) :->
	get(Self,slot,level,Level),
	get(Self,slot,level_t,TargetLevel),
	Level < TargetLevel + 1,                % Level close to Normal
	( get(Self, slot, overflow, 1)          % If draining, go back to auto-on
	 -> send_super(Self, converse, 'a1'),
	    send(Self, slot, overflow, 0)
        ; true
	).

	
% Calibration begins after someone sends the 'calibrate' message
% Lagoons can distiguish between input valves and output valves.
% command: do (disable output valves)
%          eo (enable outputs)
%          di (disable input valves)
%          ei (enable input valves)

calibrate(Self) :->
    get(Self,slot,calibration,C),
    writeln(calibration(Self,C)),
    C = normal,
    send(Self,slot,calibration,inflow),
    get_time(Time),
    send(Self,slot,start_time,Time),
    get(Self,slot,level,Level),
    CLevel is 1.1 * Level,
    send(Self,slot,calibrate_level,CLevel).
%    send(Self,command, do).  % Disable Output Flow(s)


setLevel(Self,Level) :->
       send(Self, slot, level, Level).

setFlux(Self,Level) :->
       send(Self, slot, fluorescence, Level).


normal(_Self) :-> true.

inflow(Self) :->
    get_time(Now),
    get(Self,slot,start_time,STime),
    Now >= STime + 20,
    !,
    writeln(calibrationInflowTimedOut(Self)),
    send(Self,slot,calibration,outflow),
    get(Self,slot,level,Level),
    get(Self,slot,calibrate_level,CLevel),
    Level >= CLevel,
    get_time(Time),
    get(Self,slot,start_time,StartTime),
    RateInput is ( Level/(10*(Time-StartTime))),
    send(Self,slot,rate_input,RateInput),
    CLevel is Level - (Level/11.0),
    get(Self,slot,calibrate_level,Level),
    get(Self,slot,start_time,Time), % Restart timer
%    send(Self,command, eo), % Enable Output Flow(s)
%    send(Self,command, di), % Disable Input Flow(s)
    send(Self,slot,calibration,outflow),
    !.
	       
% Calculate Output Flow Rate with time to decrease volume by 10% (1/11)

outflow(Self) :->
    get_time(Now),
    get(Self,slot,start_time,STime),
    Now >= STime + 20,
    !,
    writeln(calibrationOutflowTimedOut(Self)),
    send(Self,slot,calibration,normal),
    get(Self,slot,level,Level),
    get(Self,slot,calibrate_level,CLevel),
    Level =< CLevel,
    get_time(Time),
    get(Self,slot,start_time,StartTime),
    RateOutput is ( CLevel/(10*(Time-StartTime))),
    send(Self,slot,rate_output,RateOutput),
    send(Self,slot,calibration,normal),
%    send(Self, command, ei), % Re-enable Normal Input Flow(s)
    !.

% Adjust valve times with the calculated Flow Rates
done(Self) :->
    get(self,slot,target_rate, TargetFlow),
    get(self,slot,rate_input, RateInput),
    _DeltaInput is TargetFlow - RateInput,
%    send(Self,command,[ai,DeltaInput]),
    get(self,slot,rate_output, RateOutput),
    _DeltaOutput is TargetFlow - RateOutput,
%    send(Self,command,[ao,DeltaOutput]),
    send(Self,slot,calibration,normal).

:- pce_end_class.  % lagoon


:- pce_begin_class(sampler, ebutton).

variable(remaining,   int,   get, "Seconds until next Sample").

initialise(Self, Label:[name]) :->
	"Initialise the autosampler"::
        send_super(Self, initialise(Label)),
	send(Self,slot,remaining,3600).

update(Self) :->
	send_super(Self, update),
	( get_super(Self, socket, @nil) -> true
	; send_super(Self,converse,'t'),
	  get_super(Self, reply, Reply),
	  DefaultTime is 99*60, % 99 Minutes
	  parse_reply(Reply, Remaining, remaining(DefaultTime)),
	  Remaining = remaining(Time),
	  send(Self,slot,remaining,Time)
	),
	send(Self,fast_update).
	  
fast_update(Self) :->
	get(Self,slot,remaining,Time),
	Hours is floor(Time/3600),
	Minutes is floor(mod(Time,3600)/60),
	Seconds is Time mod 60,
	timeatom(Hours,Minutes,Seconds,TimeAtom),
	timer_left(CTime),
	param(updateCycle(Cycle)),
	TimeLeft is Cycle-CTime,
	(TimeLeft < 0 -> ShowTime = Cycle ; ShowTime = TimeLeft),
	concat_atom(['\nAutoSampler\n',
		      ShowTime,' seconds to level reading\n',
		      TimeAtom,' to next sample\n'],Label),
	send(Self, label, Label).

:- pce_end_class.  % autosampler


:- pce_begin_class(spacer, box).

variable(defaultColor, name, get, "DefaultColor" ).

initialise(Self, _Name:[name]) :->
        screen(DW,_,WW,_,_),
	NWid is DW*WW/110,
        send_super(Self, initialise(NWid, 6)),
	send(Self, colour, colour(black)),
	send(Self, slot, defaultColor, black),
	send(Self, fill_pattern, colour(black)).

color(Self, Color) :->
     ( get(Self,slot,defaultColor,colour(black))   % First time
      -> send(Self,slot,defaultColor,Color)  % New default
      ; true
     ),
     send(Self, colour, colour(Color)),
     send(Self, fill_pattern, colour(Color)).

reset(Self) :-> 
     get(Self,slot,defaultColor,C),
     send(Self, colour, colour(C)).

update(_Self) :-> true.

:- pce_end_class.

:- pce_begin_class(hotbox, box).
initialise(Self, Color:[name]) :->
        "Initialise"::
        window_percent(1,2,Width,Height),
        send_super(Self, initialise(Width,Height)),
	send(Self, colour, colour(black)),
        send(Self, fill_pattern, colour(Color)).
:- pce_end_class.
