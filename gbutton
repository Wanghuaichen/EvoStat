#!/usr/bin/xpce
:- use_module(library(time)).
:- use_module(library(pce)).
:- use_module(library(process)).
:- use_module(library(charsio)).
:- use_module(library(helpidx)).
:- use_module(library(lists)).
:- use_module(library(ctypes)).

:- use_module(library(time)).
:- use_module(library(process)).

:- dynamic tog/1.

parse_reply(Reply, Term, Default) :-
	catch( atom_to_term(Reply,Term,_TMBindings),
	       Exception,
	       ( writeln(caught(Exception,atom_to_term(Reply))), Term = exception(Exception))),
	(var(Term) -> Term = Default ; true).

getIPfromMAC(_,_) :- fail.

snapshot(Path, FileName) :-
	directory_files(Path,FileList),
	member(IFile,FileList),
	atom_codes(IFile,ICs),
	append("mypic",_,ICs),
	concat_atom([Path,IFile],FileName),
	!.
snapshot(Path, Filename) :-
	concat_atom([Path,'opencvlevel.jpg'], Filename).


% WGET will use alternate filenames so we update Image properly
% and are never caught reading a file that hasn't been fully written

toggle('mypic1.jpg','mypic2.jpg') :- tog(2), retract(tog(2)),assert(tog(1)).
toggle('mypic2.jpg', 'mypic1.jpg') :- tog(1), retract(tog(1)),assert(tog(2)).

wget( OtherFile,
      '/usr/bin/wget',
      ['-q', '-O',File,
      'http://192.168.2.117:88/cgi-bin/CGIProxy.fcgi?cmd=snapPicture2&usr=scrapsec&pwd=lakewould']):-
      toggle(File,OtherFile).

repeat(N) :-
             integer(N), % type check
             N>0,        % value check 
             repeat1(N).

repeat1(1) :- !.
repeat1(_).
repeat1(N) :- M is N-1, repeat1(M).

:- dynamic d_bt_address/2.

bt_address(Name, Address) :-
    d_bt_address(_Any,_Addr),
    !,
    d_bt_address(Name,Address).
		
bt_address(Name, Address) :-
    bt_scan(Macs,Names),
    (select(Each, Names, Mac, Macs),
     assert(d_bt_address(Each, Mac)),
     fail
    ;true
    ),
    d_bt_address(Name,Address).

:- writeln(ingbutton),
   ( current_prolog_flag(arch,'i386-win32')
     -> load_foreign_library(foreign(plblue))
     ;  load_foreign_library(plblue)
   ),
   writeln('plblue (BLUETOOTH) loaded').

:- pce_begin_class(snapshot, label).

variable(imageDirectory, name, get, "Current Image Path" ).
variable(imageFile,      name, get, "Current Image Filename" ).

initialise(Self, Label:[name]) :->
	"Initialise the image area"::
        send_super(Self, initialise(Label)),
	snapshot('./',File),
	send(Self, slot, imageFile, File),
	send(Self, slot, imageDirectory, './'),
	new(I, image(File)),
	new(B, bitmap(I)),
	send(B, size, size(200,100)),
	send(Self, selection, B),
	assert(tog(1)).

shape(Self, W:[int], H:[int]) :->
	screen(_Root, FullWidth, FullHeight, _Loc),
	MyWidth is integer(FullWidth*W/200),
	MyHeight is integer(FullHeight*H/110),
	writeln(size(Self,MyWidth,MyHeight)),
	send(Self, size, size(MyWidth,MyHeight)).

image(Self, File:[name])      :->
	send(Self,slot,imageFile, File).

imageDirectory(Self, Path:[name]) :-> send(Self,slot,imageDirectory, Path).

update(Self) :->
	get(Self, imageDirectory, Path),
	get(Self, imageFile, OldFile),
	snapshot(Path, NewFile),
	( NewFile = OldFile -> true
	; new(I, image(NewFile)),
	  send(Self, slot, imageFile, NewFile),
	  send(Self,selection, I),
	  writeln('free the image?'),
	  free(I),
	  writeln('freed the image')
	).

:- pce_end_class.

:- pce_begin_class(ebutton, button).

variable(socket,      any, get, "Bluetooth/IP Socket"      ).
variable(mac,        name, get, "Bluetooth/IP MAC Address" ).
variable(reply,      name, get, "Last Message from Device" ).
variable(levelUnits, name, get, "% or mL (usually)"        ).

% Current Settings
variable(od600,       int, get, "Optical Density (600nM)").
variable(temperature, real, get, "Temperature").

% Target Settings
variable(od600_t,       int, get, "Target Optical Density (600nM)").
variable(temperature_t, real, get, "Target Temperature").

initialise(Self, Label:[name]) :->
	"Initialise the button and connect to device"::
        send_super(Self, initialise(Label)),
	send(Self, slot, levelUnits, 'mL'),
	send(Self, slot, temperature_t, 37.0),
	send(Self, slot, od600_t, 400),
	send(Self, slot, temperature, 0.0),
	send(Self, slot, od600, 0.0),
	send(Self, slot, socket, @nil),
	( bt_address(Label,Mac),
	  send(Self, slot, mac, Mac),
	  send(Self, connect)
	; true
	),
	new(Code2, message(Self, show_conversation)),
	send(Self, recogniser, click_gesture(right,'',single,Code2)).

update(Self) :->
	( get(Self, slot, socket, @nil)
	-> send(Self,colour,colour(red))
	;  send(Self,colour,colour(green))
	).
	
show_conversation(Self) :->
        Self = @Name,
        get(Self, socket, Socket),
	new(_, dialin(Name,Socket)).
	
levelUnits(Self,Units) :->
       send(Self, slot, levelUnits, Units).

mix_colors(   C,   C,      C) :- !.
mix_colors(   _,blue, purple) :- !.
mix_colors(blue,   _, purple) :- !.
mix_colors(green,  _, orange) :- !.
mix_colors( _, green, orange).

compute(_) :-> true.

% Shape is defined as a percentage of the screen
shape(Self, W:[int], H:[int]) :->
	screen(_Root,FullWidth,FullHeight,_Pos),
	MyWidth is integer(FullWidth*W/200),
	MyHeight is integer(FullHeight*H/110),
	writeln(shape(Self,MyWidth,MyHeight)),
	send(Self, size, size(MyWidth,MyHeight)).

od(Self, OD600:[real]) :->
	 send(Self, slot, od600, OD600).

temp(Self, Temp:[real]) :->
	 send(Self, slot, temperature, Temp).

% Cellstat, Lagoon, and Autosampler Bluetooth Communications

converse(Self, Cmd) :->
	"Send command to Bluetooth Socket and save Reply ( Cellstat/Lagoon )"::
        get(Self, socket, Socket),
	bluetalk(Socket, Cmd, Reply),
	send(Self, slot, reply, Reply).

connect(Self) :->
	"Connect (or re-connect) the Bluetooth channel"::
	get(Self, mac, Addr),
	get(Self, socket, OldSocket),
        ( OldSocket == @nil -> true
	; bt_close(OldSocket),
	  send(Self, slot, socket, @nil)
	),
	( bt_socket(Addr, BTSocket) ->
	  ( BTSocket > -1 ->
	    send(Self, slot, socket, BTSocket),
	    send(Self,colour,colour(green))
	    ; send(Self,colour,colour(red))
	  )
	  ; send(Self,colour,colour(red))
	).

insertIP(Cmd, IP, Result) :-
        atom_codes(Cmd, Cs),
        atom_codes(IP, ICs),
	[AT] = "@",
        append(Front,[AT|Rest],Cs),
	flatten([Front,ICs,Rest],CommandCs),
	atom_codes(Result,CommandCs).

ip(Self, IP:[name]) :->
	 socket(IP, Socket),
	 send(Self, slot, ipsocket, Socket).

mac_wget(Self, MAC:[name], Cmd:[name]) :->
        getIPfromMAC(MAC,IP),
	send(Self, wget, wget(IP, Cmd)).

wget(Self, IP:[name], Cmd:[name]) :->
        insertIP(Cmd,IP,Command),
	send(Self, slot, wget, Command).

mac(Self, MAC:[name]) :->
        getIPfromMAC(MAC,IP),
	send(Self, ip, ip(IP)).

:- pce_end_class. % ebutton

:- pce_begin_class(cellstat, ebutton).

update(Self) :->
	send_super(Self, update),
	send_super(Self,converse,'t'),
        get(Self,slot,reply,Reply),
	writeln(cellstatreply(Reply)),
	parse_reply(Reply, temperature(Temp), temperature(11.3)),
        send(Self,slot,temperature,Temp),
        get(Self,slot,temperature_t,Target),
	range_color(Target, Temp, Tc),
        get(Self,slot,od600_t,ODTarget),
	send_super(Self,converse,'b'),
        get(Self,slot,reply,TurbReply),
        atom_to_term(TurbReply,TbTerm,_TBBindings),
	TbTerm = turbidity(TurbVal),
	send(Self,slot,od600,TurbVal),
	range_color(ODTarget, TurbVal, ODc),
	mix_colors(Tc,ODc,Color),
	send(Self, colour(Color)),
        concat_atom(['\nCellStat\nTemperature: ', Target, ' / ',Temp,'\n',
 		'Turbidity:  0.', ODTarget,' / 0.', TurbVal, '\n'], Label),
	send(Self, label, Label).

:- pce_end_class.  % cellstat

:- pce_begin_class(lagoon, ebutton).

variable(fluorescence,real, get, "Fluorescence").
variable(fluorescence_t, real, get, "Target Fluorescence").
variable(level,real, get, "Level").
variable(level_t, real, get, "Target Level").
variable(calibrate_level, real, get, "Calibration Level").

variable(calibration, name, get, "Calibration State Machine").
variable(target_rate, real, get, "Target Flow Rate").
variable(start_time, real, get, "Time since last Calibration state change").
variable(rate_input, real, get, "Calculated Input Flow Rate").
variable(rate_output, real, get, "Calculated Output Flow Rate").
variable(calibration, name, get, "Calibration State Machine").


initialise(Self, Label:[name]) :->
	"Initialise the lagoon"::
        send_super(Self, initialise(Label)),
	send(Self, slot, calibration, normal),
	send(Self, slot, level, 10.0),
	send(Self, slot, level_t, 0.3),
	send(Self, slot, fluorescence_t, 0.2),
	send(Self, slot, fluorescence, 0.0).

update(Self) :->
        send_super(Self, update),
	send_super(Self,converse,'t'),
        get(Self,slot,reply,Reply),
	writeln(lagoonreply(Reply)),
	parse_reply(Reply,target_temperature(TempInt),target_temperature(111)),
	Temp is float(TempInt)/10.0,
        send(Self,slot,temperature,Temp),
        get(Self,slot,level,Level),
        get(Self,slot,temperature,Temp),
        get(Self,slot,temperature_t,Target),
	range_color(Target, Temp, Color),
	send(Self, colour(Color)),
        get(Self,slot,fluorescence_t,LuxTarget),
        get(Self,slot,fluorescence,Lux),
	format(atom(Level2), '~4g', [Level]),
	format(atom(Lux2), '~4g', [Lux]),
	get(Self,slot,calibration,State),  % The Calibration State is the Message
	send(Self,State),
        concat_atom(['Level ', Level2, 'mL\n',
	             'Temp  ', Target, 'C / ',Temp,' C\n',
                     'Lux   ', LuxTarget, ' / ', Lux2, 'lm' ], Label),
	send(Self, label, Label).

% Calibration begins after someone sends the 'calibrate' message
% Lagoons can distiguish between input valves and output valves.
% command: do (disable output valves)
%          eo (enable outputs)
%          di (disable input valves)
%          ei (enable input valves)

calibrate(Self) :->
    get(Self,slot,calibration,C),
    writeln(calibration(Self,C)),
    C = normal,
    send(Self,slot,calibration,inflow),
    get_time(Time),
    send(Self,slot,start_time,Time),
    get(Self,slot,level,Level),
    CLevel is 1.1 * Level,
    send(Self,slot,calibrate_level,CLevel).
%    send(Self,command, do).  % Disable Output Flow(s)


setLevel(Self,Level) :->
       send(Self, slot, level, Level).

setFlux(Self,Level) :->
       send(Self, slot, fluorescence, Level).


normal(_Self) :-> true.

inflow(Self) :->
    get_time(Now),
    get(Self,slot,start_time,STime),
    Now >= STime + 20,
    !,
    writeln(calibrationInflowTimedOut(Self)),
    send(Self,slot,calibration,outflow),
    get(Self,slot,level,Level),
    get(Self,slot,calibrate_level,CLevel),
    Level >= CLevel,
    get_time(Time),
    get(Self,slot,start_time,StartTime),
    RateInput is ( Level/(10*(Time-StartTime))),
    send(Self,slot,rate_input,RateInput),
    CLevel is Level - (Level/11.0),
    get(Self,slot,calibrate_level,Level),
    get(Self,slot,start_time,Time), % Restart timer
%    send(Self,command, eo), % Enable Output Flow(s)
%    send(Self,command, di), % Disable Input Flow(s)
    send(Self,slot,calibration,outflow),
    !.
	       
% Calculate Output Flow Rate with time to decrease volume by 10% (1/11)

outflow(Self) :->
    get_time(Now),
    get(Self,slot,start_time,STime),
    Now >= STime + 20,
    !,
    writeln(calibrationOutflowTimedOut(Self)),
    send(Self,slot,calibration,normal),
    get(Self,slot,level,Level),
    get(Self,slot,calibrate_level,CLevel),
    Level =< CLevel,
    get_time(Time),
    get(Self,slot,start_time,StartTime),
    RateOutput is ( CLevel/(10*(Time-StartTime))),
    send(Self,slot,rate_output,RateOutput),
    send(Self,slot,calibration,normal),
%    send(Self, command, ei), % Re-enable Normal Input Flow(s)
    !.

% Adjust valve times with the calculated Flow Rates
done(Self) :->
    get(self,slot,target_rate, TargetFlow),
    get(self,slot,rate_input, RateInput),
    _DeltaInput is TargetFlow - RateInput,
%    send(Self,command,[ai,DeltaInput]),
    get(self,slot,rate_output, RateOutput),
    _DeltaOutput is TargetFlow - RateOutput,
%    send(Self,command,[ao,DeltaOutput]),
    send(Self,slot,calibration,normal).

:- pce_end_class.  % lagoon


:- pce_begin_class(sampler, ebutton).

initialise(Self, Label:[name]) :->
	"Initialise the autosampler"::
        send_super(Self, initialise(Label)).

update(Self) :->
	send_super(Self, update).

:- pce_end_class.  % autosampler


:- pce_begin_class(spacer, box).

initialise(Self, _Name:[name]) :->
	screen(_,W,_H,_Pos),
	NWid is 2*W/3 - 20,
        send_super(Self, initialise(NWid, 6)),
	send(Self, colour, colour(black)),
	send(Self, fill_pattern, colour(black)).

color(Self, Color) :->
	send(Self, colour, colour(Color)),
	send(Self, fill_pattern, colour(Color)).

update(_Self) :-> true.

:- pce_end_class.

:- pce_begin_class(hotbox, box).
initialise(Self, Color:[name]) :->
        "Initialise"::
	screen(_,W,H,_Pos),
	Width is W/100,
	Height is H*2/100,
        send_super(Self, initialise(Width,Height)),
	send(Self, colour, colour(black)),
        send(Self, fill_pattern, colour(Color)).
:- pce_end_class.
